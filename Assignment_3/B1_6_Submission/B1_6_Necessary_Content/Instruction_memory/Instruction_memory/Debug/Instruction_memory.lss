
Instruction_memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ec  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z12reverse_bitsh>:

#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

uint8_t reverse_bits(uint8_t num) {
  82:	98 2f       	mov	r25, r24
	uint8_t reversed = 0;
	for(int i=0; i<=7; i++) {
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

uint8_t reverse_bits(uint8_t num) {
	uint8_t reversed = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0; i<=7; i++) {
  8a:	48 30       	cpi	r20, 0x08	; 8
  8c:	51 05       	cpc	r21, r1
  8e:	f4 f4       	brge	.+60     	; 0xcc <_Z12reverse_bitsh+0x4a>
		uint8_t temp = num & (1 << i);
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	04 2e       	mov	r0, r20
  96:	02 c0       	rjmp	.+4      	; 0x9c <_Z12reverse_bitsh+0x1a>
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <_Z12reverse_bitsh+0x16>
  a0:	29 23       	and	r18, r25
		temp = temp >> i;
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	04 2e       	mov	r0, r20
  a6:	02 c0       	rjmp	.+4      	; 0xac <_Z12reverse_bitsh+0x2a>
  a8:	35 95       	asr	r19
  aa:	27 95       	ror	r18
  ac:	0a 94       	dec	r0
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z12reverse_bitsh+0x26>
		reversed = reversed | (temp << (7-i));
  b0:	67 e0       	ldi	r22, 0x07	; 7
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	64 1b       	sub	r22, r20
  b6:	75 0b       	sbc	r23, r21
  b8:	33 27       	eor	r19, r19
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_Z12reverse_bitsh+0x3e>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <_Z12reverse_bitsh+0x3a>
  c4:	82 2b       	or	r24, r18
#include <avr/io.h>
#include <util/delay.h>

uint8_t reverse_bits(uint8_t num) {
	uint8_t reversed = 0;
	for(int i=0; i<=7; i++) {
  c6:	4f 5f       	subi	r20, 0xFF	; 255
  c8:	5f 4f       	sbci	r21, 0xFF	; 255
  ca:	df cf       	rjmp	.-66     	; 0x8a <_Z12reverse_bitsh+0x8>
		uint8_t temp = num & (1 << i);
		temp = temp >> i;
		reversed = reversed | (temp << (7-i));
	}
	return reversed;
}
  cc:	08 95       	ret

000000ce <main>:
	0x801b, 0x8029, 0xb611, 0xb622, 0x4631, 0x4642, 0xa345, 0x2000
};

int main(void)
{
    MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	84 bf       	out	0x34, r24	; 52
  d2:	84 bf       	out	0x34, r24	; 52
	DDRB = 0x00;	// Program counter input
  d4:	17 ba       	out	0x17, r1	; 23
	
	// Top 8 bits: A0 - A7, A0 is MSB
	// Bottom 8 bits: C7 - C0, C7 is MSB
	DDRA = 0xff;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
  da:	84 bb       	out	0x14, r24	; 20
	
	// D[0] - Stack Toggle
	// DDRD = 0xff;
	
	uint8_t pc = -1, top_8_bits, bottom_8_bits;
  dc:	cf ef       	ldi	r28, 0xFF	; 255
	uint16_t instruction;
    while (1) 
    {
		if(pc == PINB) continue;
  de:	86 b3       	in	r24, 0x16	; 22
  e0:	c8 17       	cp	r28, r24
  e2:	e9 f3       	breq	.-6      	; 0xde <main+0x10>
		pc = PINB;
  e4:	c6 b3       	in	r28, 0x16	; 22
		instruction = instruction_memory[pc];
  e6:	ec 2f       	mov	r30, r28
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e0 5a       	subi	r30, 0xA0	; 160
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	d0 81       	ld	r29, Z
		bottom_8_bits = uint8_t(instruction);
		top_8_bits = reverse_bits(uint8_t(instruction >> 8));
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	0e 94 41 00 	call	0x82	; 0x82 <_Z12reverse_bitsh>
		PORTA = top_8_bits;
  fa:	8b bb       	out	0x1b, r24	; 27
		PORTC = bottom_8_bits;
  fc:	d5 bb       	out	0x15, r29	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x34>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x3a>
 108:	00 00       	nop
 10a:	e9 cf       	rjmp	.-46     	; 0xde <main+0x10>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
