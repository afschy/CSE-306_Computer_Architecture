
Register_file.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bf  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e5  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

uint8_t register_file[8] = {0};

int main(void)
{
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	84 bf       	out	0x34, r24	; 52
  80:	84 bf       	out	0x34, r24	; 52
	
	DDRB = 0x00;	// B[3:0] - SrcReg1, B[7:4] - SrcReg2, MSB = 3 and 7
  82:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00;	// D[3:0] - DstReg, D[7:4] - Write Data, MSB = 3 and 7
  84:	11 ba       	out	0x11, r1	; 17
	
	DDRA = 0xFF;	// A[3:0] - $1, A[7:4] - $2, MSB = 3 and 7
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xF0;	// C[0] - WriteReg, C[1] - CLK, C[2] - RESET
  8a:	80 ef       	ldi	r24, 0xF0	; 240
  8c:	84 bb       	out	0x14, r24	; 20
	
	uint8_t src, dst_data, last_control = 0, current_control;
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x18>
				PORTD = dst_data & 0xf0;
			}
			_delay_ms(50);
		}
		
		last_control = current_control;
  92:	32 2f       	mov	r19, r18
	
	uint8_t src, dst_data, last_control = 0, current_control;
	
	while (1)
	{
		src = PINB;
  94:	e6 b3       	in	r30, 0x16	; 22
		dst_data = PIND;
  96:	40 b3       	in	r20, 0x10	; 16
		current_control = PINC;
  98:	23 b3       	in	r18, 0x13	; 19
		
		PORTA = (register_file[(src>>4) & 0x7]<<4) | (register_file[src & 0x7]);
  9a:	ae 2f       	mov	r26, r30
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	b5 95       	asr	r27
  a0:	a7 95       	ror	r26
  a2:	b5 95       	asr	r27
  a4:	a7 95       	ror	r26
  a6:	b5 95       	asr	r27
  a8:	a7 95       	ror	r26
  aa:	b5 95       	asr	r27
  ac:	a7 95       	ror	r26
  ae:	a7 70       	andi	r26, 0x07	; 7
  b0:	bb 27       	eor	r27, r27
  b2:	a0 5a       	subi	r26, 0xA0	; 160
  b4:	bf 4f       	sbci	r27, 0xFF	; 255
  b6:	8c 91       	ld	r24, X
  b8:	50 e1       	ldi	r21, 0x10	; 16
  ba:	85 9f       	mul	r24, r21
  bc:	c0 01       	movw	r24, r0
  be:	11 24       	eor	r1, r1
  c0:	e7 70       	andi	r30, 0x07	; 7
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	90 81       	ld	r25, Z
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
		if (current_control & RESET_) {		// Reset all registers
  ce:	22 ff       	sbrs	r18, 2
  d0:	12 c0       	rjmp	.+36     	; 0xf6 <main+0x7a>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
			for (int i=0; i<8; i++) register_file[i] = 0;
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	91 05       	cpc	r25, r1
  da:	34 f4       	brge	.+12     	; 0xe8 <main+0x6c>
  dc:	fc 01       	movw	r30, r24
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	10 82       	st	Z, r1
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	f7 cf       	rjmp	.-18     	; 0xd6 <main+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x70>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x76>
  f2:	00 00       	nop
  f4:	cf cf       	rjmp	.-98     	; 0x94 <main+0x18>
			_delay_ms(50);
			continue;
		}
		
		if ((current_control ^ last_control) & CLK_) {		// EDGE
  f6:	83 2f       	mov	r24, r19
  f8:	82 27       	eor	r24, r18
  fa:	81 ff       	sbrs	r24, 1
  fc:	ca cf       	rjmp	.-108    	; 0x92 <main+0x16>
			if ((last_control & CLK_) && (last_control & WRITE_REG_)) {		// NEGATIVE EDGE with WRITE INSTRUCTION
  fe:	31 ff       	sbrs	r19, 1
 100:	14 c0       	rjmp	.+40     	; 0x12a <main+0xae>
 102:	30 ff       	sbrs	r19, 0
 104:	12 c0       	rjmp	.+36     	; 0x12a <main+0xae>
				register_file[dst_data & 0x7] = (dst_data >> 4);
 106:	e4 2f       	mov	r30, r20
 108:	e7 70       	andi	r30, 0x07	; 7
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	84 2f       	mov	r24, r20
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	e0 5a       	subi	r30, 0xA0	; 160
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	80 83       	st	Z, r24
				PORTD = dst_data & 0xf0;
 126:	40 7f       	andi	r20, 0xF0	; 240
 128:	42 bb       	out	0x12, r20	; 18
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0xb2>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb8>
 134:	00 00       	nop
			}
			_delay_ms(50);
		}
		
		last_control = current_control;
 136:	32 2f       	mov	r19, r18
 138:	ad cf       	rjmp	.-166    	; 0x94 <main+0x18>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
