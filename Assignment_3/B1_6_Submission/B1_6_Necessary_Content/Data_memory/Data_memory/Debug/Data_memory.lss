
Data_memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800060  00800060  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000701  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d6  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 3a       	cpi	r26, 0xA0	; 160
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12memory_resetv>:

uint8_t data_memory[32];
uint8_t stack_memory[32];

void memory_reset() {
	for (int i=0; i<32; i++){
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	80 32       	cpi	r24, 0x20	; 32
  82:	91 05       	cpc	r25, r1
  84:	54 f4       	brge	.+20     	; 0x9a <_Z12memory_resetv+0x1e>
		data_memory[i] = 0;
  86:	fc 01       	movw	r30, r24
  88:	e0 58       	subi	r30, 0x80	; 128
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	10 82       	st	Z, r1
		stack_memory[i] = 0;
  8e:	fc 01       	movw	r30, r24
  90:	e0 5a       	subi	r30, 0xA0	; 160
  92:	ff 4f       	sbci	r31, 0xFF	; 255
  94:	10 82       	st	Z, r1

uint8_t data_memory[32];
uint8_t stack_memory[32];

void memory_reset() {
	for (int i=0; i<32; i++){
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	f3 cf       	rjmp	.-26     	; 0x80 <_Z12memory_resetv+0x4>
  9a:	08 95       	ret

0000009c <main>:
	}
}

int main(void)
{
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	84 bf       	out	0x34, r24	; 52
  a0:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xE0;	// A[0] - Memory Write | A[1] - Memory Read | A[2] - Clock | A[3] - Reset | A[4] - StackToggle
  a2:	80 ee       	ldi	r24, 0xE0	; 224
  a4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// Address B[3:0] | Write Data B[7:4]
  a6:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;	// C[3:0] - Data Read
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
	memory_reset();
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12memory_resetv>
	
	uint8_t last_control_input = 0b0000, current_control_input;
	uint8_t last_write_data_address = 0b0000, current_write_data_address;
  b0:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0x00;	// Address B[3:0] | Write Data B[7:4]
	DDRC = 0xFF;	// C[3:0] - Data Read
	
	memory_reset();
	
	uint8_t last_control_input = 0b0000, current_control_input;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x1e>
  b6:	8d 2f       	mov	r24, r29
  b8:	91 2f       	mov	r25, r17
	uint8_t last_write_data_address = 0b0000, current_write_data_address;
	
	while (1)
	{
		current_control_input = PINA & 0x1F;
  ba:	c9 b3       	in	r28, 0x19	; 25
  bc:	dc 2f       	mov	r29, r28
  be:	df 71       	andi	r29, 0x1F	; 31
		current_write_data_address = PINB;
  c0:	16 b3       	in	r17, 0x16	; 22
		if (current_control_input & RESET_) {
  c2:	c3 ff       	sbrs	r28, 3
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <main+0x3c>
			memory_reset();
  c6:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12memory_resetv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x32>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x38>
  d4:	00 00       	nop
  d6:	31 c0       	rjmp	.+98     	; 0x13a <main+0x9e>
			_delay_ms(50);
		}
		else if ((last_control_input ^ current_control_input) & CLK_) {			// EDGE
  d8:	28 2f       	mov	r18, r24
  da:	2d 27       	eor	r18, r29
  dc:	22 ff       	sbrs	r18, 2
  de:	2d c0       	rjmp	.+90     	; 0x13a <main+0x9e>
			if ((last_control_input & CLK_) && (last_control_input & MEM_WRITE_)){	// NEG-EDGE - for writing
  e0:	82 ff       	sbrs	r24, 2
  e2:	25 c0       	rjmp	.+74     	; 0x12e <main+0x92>
  e4:	80 ff       	sbrs	r24, 0
  e6:	23 c0       	rjmp	.+70     	; 0x12e <main+0x92>
				if(last_control_input & STOGG_) stack_memory[last_write_data_address & 0xF] = (last_write_data_address >> 4);
  e8:	84 ff       	sbrs	r24, 4
  ea:	11 c0       	rjmp	.+34     	; 0x10e <main+0x72>
  ec:	e9 2f       	mov	r30, r25
  ee:	ef 70       	andi	r30, 0x0F	; 15
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	89 2f       	mov	r24, r25
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 83       	st	Z, r24
 10c:	10 c0       	rjmp	.+32     	; 0x12e <main+0x92>
				else data_memory[last_write_data_address & 0xF] = (last_write_data_address >> 4);
 10e:	e9 2f       	mov	r30, r25
 110:	ef 70       	andi	r30, 0x0F	; 15
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	89 2f       	mov	r24, r25
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	e0 58       	subi	r30, 0x80	; 128
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 83       	st	Z, r24
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x96>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x9c>
 138:	00 00       	nop
			}
			_delay_ms(50);
		}
		if (current_control_input & MEM_READ_) {
 13a:	c1 ff       	sbrs	r28, 1
 13c:	bc cf       	rjmp	.-136    	; 0xb6 <main+0x1a>
			if(current_control_input & STOGG_) PORTC = stack_memory[current_write_data_address & 0xF];
 13e:	c4 ff       	sbrs	r28, 4
 140:	08 c0       	rjmp	.+16     	; 0x152 <main+0xb6>
 142:	e1 2f       	mov	r30, r17
 144:	ef 70       	andi	r30, 0x0F	; 15
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e0 5a       	subi	r30, 0xA0	; 160
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	85 bb       	out	0x15, r24	; 21
 150:	b2 cf       	rjmp	.-156    	; 0xb6 <main+0x1a>
			else PORTC = data_memory[current_write_data_address & 0xF];
 152:	e1 2f       	mov	r30, r17
 154:	ef 70       	andi	r30, 0x0F	; 15
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 58       	subi	r30, 0x80	; 128
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	85 bb       	out	0x15, r24	; 21
 160:	aa cf       	rjmp	.-172    	; 0xb6 <main+0x1a>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
